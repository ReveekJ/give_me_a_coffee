services:
#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin-container
#    ports:
#      - "5433:5433"
#    environment:
#      PGADMIN_DEFAULT_EMAIL: example@example.dot
#      PGADMIN_DEFAULT_PASSWORD: 123456789
#      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
#      PGADMIN_LISTEN_PORT: 5433
#      PGADMIN_DEFAULT_SERVER: postgres_db
#    volumes:
#      - pgadmin-data:/var/lib/pgadmin
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
#    networks:
#      - app_network
#    depends_on:
#      - coffee_db
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:5433" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3

  coffee_db:
    image: postgres:15
    container_name: coffee_db
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - app_network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "54322:5432"

  admin_tgbot:
    container_name: admin_tgbot
    restart: "no"
    build:
      context: .
      dockerfile: src/admin_tgbot/Dockerfile
    env_file:
      - .env
    depends_on:
      - coffee_db
    networks:
      - app_network
    volumes:
      - ./generated_qr:/qr_codes

  user_tgbot:
    container_name: user_tgbot
    restart: "no"
    build:
      context: .
      dockerfile: src/user_tgbot/Dockerfile
    env_file:
      - .env
    depends_on:
      - coffee_db
      - admin_tgbot
    networks:
      - app_network
      - redis_network
    volumes:
      - ./generated_qr:/qr_codes

  redis:
    image: redis:latest
    restart: always
    container_name: redis
#    ports:
#      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis_network


volumes:
  postgres-data:
  pgadmin-data:
  redis_data:

networks:
  app_network:
    driver: bridge
  redis_network:
    driver: bridge

